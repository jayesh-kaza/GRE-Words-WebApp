{"version":3,"sources":["Components/ShowWords.js","Components/Words.js","Components/WordsForUser.js","Components/Basic.js","Login.js","Register.js","Loginscreen.js","App.js","serviceWorker.js","index.js"],"names":["ShowWords","props","handleClick","id","index","payload","userid","flag","axios","post","then","response","state","setState","console","log","data","catch","error","alert","len","flags","ButtonColor","text","this","Table","map","abc","key","word","meaning","Button","disabled","color","onClick","Component","Words","show","x","Math","floor","random","info","slice","get","WordsForUser","length","Basic","loginPage","push","parentContext","appContext","uploadScreen","toggle","bind","activeTab","tab","className","Spinner","type","align","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","Row","Col","sm","Login","username","password","event","self","apiBaseUrl","status","userScreen","title","hintText","floatingLabelText","onChange","newValue","label","primary","style","margin","Register","user_name","loginscreen","loginmessage","buttonLabel","isLogin","Loginscreen","loginscreen1","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c35fe4d.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport { Table } from 'reactstrap'\nimport {Button} from 'reactstrap'\nimport axios from 'axios'\n\n//This Component shows words from the data sent by \n//WordsForUsers Component or Words Component\nclass ShowWords extends Component\n{\n\n    constructor(props){\n        super(props)\n        this.state={\n            flag:this.props.flags\n        }\n    }\n\n    //Handler when Add-to-learnt or Remove Button is clicked\n    handleClick =(id,index)=>\n    {\n        var payload = {\n            \"w_id\" : id,\n            \"u_id\" : this.props.userid\n        }\n\n        //When Add-to-Learnt is Clicked\n        if(this.props.flag===\"AllWords\")\n        {\n            //post request to back-end is sent to add the word to the user\n            axios.post('http://localhost:8080/users/addWord',payload)\n            .then(response => {\n                //flags are set to disable the specific button\n                //to prevent them for duplicate adding\n                var flag= this.state.flag\n                flag[index] = true\n                this.setState({\n                    flag:flag\n                })\n                console.log(response.data)\n            })\n            .catch(error=>{\n                console.log(error)\n                alert('cannot add ')\n                console.log('cannot add word')\n            });\n        }\n        //When remove is clicked\n        else{\n            //post request is sent to delete the word from the user\n            axios.post('http://localhost:8080/users/removeWord',payload)\n            .then(response =>{\n                this.props.len = 0\n                console.log(response.data)\n            })\n            .catch(error=>{\n                console.log('cannot remove word')\n            });\n        }\n        \n    }\n\n    //The data is shown in the form of a table\n    render()\n    {\n        var ButtonColor = \"info\"\n        var text = \"Add to learnt\"\n        if(this.props.flag===\"UserWords\")\n        {\n            ButtonColor = \"danger\" \n            text = \"Remove\"\n        }\n        return(\n            <Table>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Word</th>\n                            <th>Meaning</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.props.data.map(\n                        (abc,index) => \n                        <tr key={abc.id}>\n                            <td>{abc.id}</td>\n                            <td>{abc.word}</td>\n                            <td>{abc.meaning}</td>\n                            <td><Button disabled={this.props.flags[index]} color={ButtonColor} onClick={()=>this.handleClick(abc.id,index) }>{text}</Button></td>\n                        </tr>\n                        )\n                    }\n                    </tbody>\n                </Table>\n        )\n    }\n}\n\nexport default ShowWords;","import React,{Component} from 'react'\nimport axios from 'axios'\nimport {Button} from 'reactstrap'\nimport ShowWords from './ShowWords';\n\n//This component gets all the words and \n//displays (5 of them ) using ShowWords Component\nclass Words extends Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.state={\n            data:[],\n            info:[],\n            flags:[false,false,false,false,false]\n        }\n    }\n\n    //At the start, get the data from the back-end\n    componentDidMount(){\n        axios.get('http://172.16.18.66:8080/words/all')\n        .then(\n            response => {\n                var x = Math.floor(Math.random()*317)\n                this.setState(\n                    {\n                     data:response.data,\n                     info:response.data.slice(x,x+5)\n                    })\n            }\n        )\n        .catch(error =>{\n            alert('Unable to fetch data')\n        })\n    }\n\n    //handler for showMore button. Randomizes data and displays it\n    //flags are used to disable a button when clicked\n    show = ()=>{\n        var x = Math.floor(Math.random()*317)\n        var info = this.state.data.slice(x,x+5)\n        var flags = [false,false,false,false,false]\n        this.setState({\n            info : info,\n            flags:flags\n        })\n    }\n\n    render()\n    {\n        // var flags=[false,false,false,false,false]\n        return(\n            <div>\n                <Button onClick={this.show} color=\"info\">Show More</Button>\n                <br/>\n                <br/>\n                <ShowWords data={this.state.info} flag=\"AllWords\" flags={this.state.flags} userid={this.props.userid}/>\n            </div>\n        )\n    }\n}\n\nexport default Words;","import React,{Component} from 'react'\nimport axios from 'axios';\nimport ShowWords from './ShowWords';\n\n//This component gets all the words for a user\n//and displays them using ShowWords Component\nclass WordsForUser extends Component\n{\n\n    constructor(props)\n    {\n        super(props)\n        this.state={\n            data:[],\n            length:0\n        }\n    }\n\n    //At the start, the data is collected from the database\n    componentDidMount()\n    {\n        axios.get('http://localhost:8080/users/words/'+this.props.userid)\n        .then(\n            response => {\n                this.setState(\n                    {\n                     data:response.data,\n                     length:response.data.length\n                    })\n            }\n        )\n        .catch(error =>{\n            alert('Unable to fetch data')\n        })\n    }\n\n    //Whenever a learnt word is removed or added\n    //the state is updated, and this method gathers the data again\n    async componentDidUpdate()\n    {\n        axios.get('http://localhost:8080/users/words/'+this.props.userid)\n        .then(\n            response => {\n                this.setState(\n                    {\n                     data:response.data,\n                     length:response.data.length\n                    })\n            }\n        )\n        .catch(error =>{\n            alert('Unable to fetch data')\n        })\n    }\n\n\n    render()\n    {\n        var flags=[false,false,false,false,false]\n        return(\n            <div>\n            <h1>You have learnt {this.state.data.length} word(s).</h1>\n            <br/>\n                <ShowWords data={this.state.data} len={this.state.length} flag=\"UserWords\" flags={flags} userid={this.props.userid}/>\n            </div>\n        )\n    }\n}\n\nexport default WordsForUser;","import React,{Component} from 'react'\nimport '../App.css';\nimport { Spinner } from 'reactstrap';\nimport {Button} from 'reactstrap'\nimport Words from './Words';\nimport WordsForUser from './WordsForUser';\nimport { TabContent, TabPane, Nav, NavItem, NavLink,Row, Col } from 'reactstrap';\nimport classnames from 'classnames';\nimport Loginscreen from '../Loginscreen'\n\n\nclass Basic extends Component\n{\n    constructor(props)\n    {\n        super(props)\n\n        this.toggle = this.toggle.bind(this)\n        this.state={\n            activeTab:'1'\n        };\n    }\n\n    //To toggle between tabs\n    toggle(tab){\n        if(this.state.activeTab!==tab)\n        {\n            this.setState({\n                activeTab:tab\n            });\n        }\n    }\n\n    //handler for Logout Button\n    handleClick = () =>{\n        var loginPage =[];\n        loginPage.push(<Loginscreen parentContext={this}/>);\n        this.props.appContext.setState({loginPage:loginPage,uploadScreen:[],flag:true})\n    }\n\n\n    render()\n    {\n        return(\n            <div>\n                <div className='dark'>\n                <h3>\n                <Spinner type=\"grow\" color=\"primary\" />\n                <Spinner type=\"grow\" color=\"secondary\" />\n                <Spinner type=\"grow\" color=\"success\" />\n                <Spinner type=\"grow\" color=\"danger\" />\n                <Spinner type=\"grow\" color=\"warning\" />\n                <Spinner type=\"grow\" color=\"info\" />\n                <Spinner type=\"grow\" color=\"dark\" />GRE Words\n                </h3>\n                <br/>\n                </div>\n                <div align=\"right\">\n                <Button color=\"danger\" onClick={this.handleClick}>Logout</Button>\n            </div>\n            <div>\n            <Nav tabs>\n                <NavItem>\n                    <NavLink className={classnames({active:this.state.activeTab==='1'})}\n                    onClick={()=>{this.toggle('1');}}>\n                        All Words\n                    </NavLink>\n                </NavItem>\n                <NavItem>\n                    <NavLink className = {classnames({active:this.state.activeTab==='2'})}\n                    onClick={()=>{this.toggle('2');}}>\n                        Learnt Words\n                    </NavLink>\n                </NavItem>\n            </Nav>\n            <br/>\n            <TabContent activeTab={this.state.activeTab}>\n                <TabPane tabId=\"1\">\n                    <Row>\n                        <Col sm=\"12\">\n                            <Words userid={this.props.userid}/>\n                        </Col>\n                    </Row>\n                </TabPane>\n                <TabPane tabId=\"2\">\n                    <Row>\n                        <Col sm=\"12\">\n                            <WordsForUser userid = {this.props.userid}/>\n                        </Col>\n                    </Row>\n                </TabPane>\n            </TabContent>\n            </div>\n            \n        </div>\n        )\n        \n    }\n}\n\nexport default Basic;","import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\nimport Basic from './Components/Basic';\nimport React,{Component} from 'react'\nimport axios from 'axios'\n\nclass Login extends Component {\n\n    constructor(props){\n    super(props);\n    this.state={\n    username:'',\n    password:''\n        }\n    }\n\n    //handler for Login Button\n    handleClick(event){\n        var apiBaseUrl = \"http://localhost:8080/users/\";\n        var self = this;\n        var payload={\n        \"name\":this.state.username,\n        \"password\":this.state.password\n        }\n        //Make a post request to the back-end\n        axios.post(apiBaseUrl+'login', payload)\n        .then(function (response) {\n            console.log(response);\n            if(response.status === 200){\n            console.log(\"Login successfull\");\n            var userScreen=[];\n            //Make changes to the userScreen[] delegated as Context and \n            //update it with userScreen i.e. Basic component\n            userScreen.push(<Basic appContext={self.props.appContext} userid={response.data.id}/>)\n            self.props.appContext.setState({loginPage:[],userScreen:userScreen,flag:false})\n            }\n            else if(response.status === 404){\n            console.log(\"Username password do not match\");\n            alert(\"username password do not match\")\n            }\n            else{\n            console.log(\"Username does not exists\");\n            alert(\"Username does not exist\");\n            }\n        })\n        .catch(function (error) {\n        console.log(error);\n        });\n        }\n\n\n    render() {\n        return (\n        <div>\n            <MuiThemeProvider>\n            <div>\n            <AppBar\n                 title=\"Login\"\n            />\n            <TextField\n                hintText=\"Enter your Username\"\n                floatingLabelText=\"Username\"\n                onChange = {(event,newValue) => this.setState({username:newValue})}\n             />\n           <br/>\n             <TextField\n               type=\"password\"\n               hintText=\"Enter your Password\"\n               floatingLabelText=\"Password\"\n               onChange = {(event,newValue) => this.setState({password:newValue})}\n               />\n             <br/>\n             <RaisedButton label=\"Submit\" primary={true} style={style} onClick={(event) => this.handleClick(event)}/>\n         </div>\n         </MuiThemeProvider>\n      </div>\n    );\n  }\n}\nconst style = {\n margin: 15,\n};\nexport default Login;","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\nimport axios from 'axios';\nimport Login from './Login';\n\nclass Register extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      user_name:'',\n      password:''\n    }\n  }\n\n  handleClick(event){\n    var apiBaseUrl = \"http://localhost:8080/users/\";\n    //console.log(\"values\",this.state.user_name.this.state.password);\n    //To be done:check for empty values before hitting submit\n    var self = this;\n    var payload={\n    \"name\": this.state.user_name,\n    \"password\":this.state.password\n    }\n    axios.post(apiBaseUrl+'/register', payload)\n   .then(function (response) {\n     console.log(response);\n     if(response.status === 200){\n      //  console.log(\"registration successfull\");\n       var loginscreen=[];\n       loginscreen.push(<Login parentContext={this}/>);\n       var loginmessage = \"Not Registered yet.Go to registration\";\n       self.props.parentContext.setState({loginscreen:loginscreen,\n       loginmessage:loginmessage,\n       buttonLabel:\"Register\",\n       isLogin:true\n        });\n     }\n   })\n   .catch(function (error) {\n     console.log(error);\n   });\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <MuiThemeProvider>\n          <div>\n          <AppBar\n             title=\"Register\"\n           />\n           <TextField\n             hintText=\"Enter your User Name\"\n             floatingLabelText=\"User Name\"\n             onChange = {(event,newValue) => this.setState({user_name:newValue})}\n             />\n           <br/>\n           <TextField\n             type = \"password\"\n             hintText=\"Enter your Password\"\n             floatingLabelText=\"Password\"\n             onChange = {(event,newValue) => this.setState({password:newValue})}\n             />\n           <br/>\n           <RaisedButton label=\"Submit\" primary={true} style={style} onClick={(event) => this.handleClick(event)}/>\n          </div>\n         </MuiThemeProvider>\n      </div>\n    );\n  }\n}\nconst style = {\n    margin: 15,\n    };\n\nexport default Register;","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Login from './Login';\nimport Register from './Register';\n\nclass Loginscreen extends Component {\n\n  //This component contains the register user and Login Page details\n  constructor(props){\n    super(props);\n    //username and password in the state is to register the user\n    //loginscreen[] stores the Login Component\n    this.state={\n      username:'',\n      password:'',\n      loginscreen:[],\n      loginmessage:'',\n      buttonLabel:'Register',\n      isLogin:true\n    }\n  }\n\n  //At the start, add the Login component in 'loginscreen[]'\n  componentDidMount(){\n    var loginscreen=[];\n    loginscreen.push(<Login parentContext={this} appContext={this.props.parentContext}/>);\n    var loginmessage = \"Not registered yet, Register Now\";\n    this.setState({\n      loginscreen:loginscreen,\n      loginmessage:loginmessage\n      })\n  }\n\n  \n\n  //handler for Register Button\n  handleClick(event){\n    // console.log(\"event\",event);\n    var loginmessage;\n    if(this.state.isLogin)\n    {\n      var loginscreen=[];\n      //change loginscreen[] to hold Register component then it will re-render.\n      loginscreen.push(<Register parentContext={this}/>);\n      loginmessage = \"Already registered.Go to Login\";\n      this.setState({\n        loginscreen:loginscreen,\n        loginmessage:loginmessage,\n        buttonLabel:\"Login\",\n        isLogin:false\n      })\n    }\n    else\n    {\n      //change the message to not registered.\n      var loginscreen1=[];\n      loginscreen1.push(<Login parentContext={this}/>);\n      loginmessage = \"Not Registered yet.Go to registration\";\n      this.setState({\n        loginscreen:loginscreen1,\n        loginmessage:loginmessage,\n        buttonLabel:\"Register\",\n        isLogin:true\n      })\n    }\n  }\n\n  //First display Login component (in loginscreen[])\n  //then display Register button\n  render() {\n    return (\n      <div className=\"loginscreen\">\n        {this.state.loginscreen}\n        <div>\n          {this.state.loginmessage}\n          <MuiThemeProvider>\n            <div>\n               <RaisedButton label={this.state.buttonLabel} primary={true} style={style} onClick={(event) => this.handleClick(event)}/>\n           </div>\n          </MuiThemeProvider>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nconst style = {\n  margin: 15,\n};\n\nexport default Loginscreen;","import React, { Component } from 'react';\nimport './App.css';\nimport Loginscreen from './Loginscreen'\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      //to store login-page components\n      loginPage:[],\n      //to store user-screen components\n      userScreen:[],\n      flag:true\n    }\n  }\n\n  //When the component first mounts add the LoginScreen Component\n  componentDidMount(){\n    var loginPage =[];\n    loginPage.push(<Loginscreen parentContext={this}/>);\n    this.setState({\n                  loginPage:loginPage\n                    })\n  }\n\n  render() {\n\n    //flag is to display either the loginPage first or the userScreen first\n    const x = this.state.flag?this.state.loginPage:this.state.userScreen\n    return (\n      <div>\n        <div className=\"App\">\n          {x}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}